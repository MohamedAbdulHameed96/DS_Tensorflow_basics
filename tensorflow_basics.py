# -*- coding: utf-8 -*-
"""Tensorflow_basics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/197Lq9unmTPeZF4Vzgeo8bH0rW1-8nyGF

#Tensorflow basics

#Tensor
"""

import tensorflow as tf

a = tf.constant("hello world!")
print (a)


tf.print("The value of my_variable is:", a)

"""#Constants"""

#import tensorflow as tf

print (tf.constant("hello world!"))
print (tf.constant(1))
print (tf.constant(1, tf.int16))
print (tf.constant(1.25))
print (tf.constant([1,2,3]))
print (tf.constant([[1,2,3],[4,5,6]]))
print (tf.constant([[[1,2,3],[4,5,6]],
                    [[7,8,9],[10,11,12]],
                    [[13,14,15],[16,17,18]]]))
print (tf.constant([True, True, False]))
print (tf.zeros(10))
print (tf.ones([10, 10]))         # '1's 10 X 10'

"""#Properties"""

a = tf.constant(1)
b = tf.constant(2)
c = tf.constant(1, name = "valu")
tf.print (a)
tf.print (b)
tf.print (c)


d = tf.constant([[1,2],[3,4],[5,6]])
e = tf.ones(d.shape[0])
print (a.get_shape())
print (d.get_shape())
print (e.get_shape())
#print (tf.ones(a.shape[0]))

c = tf.constant(1.25)
print (c.dtype)
print (tf.cast(c, dtype=tf.int32).dtype)

import tensorflow as tf

# Create a TensorFlow constant
tensor_name = "my_custom_tensor"
tensor = tf.constant([[1, 2, 3], [4, 5, 6]], name=tensor_name)

# Print the tensor values
tf.print("The tensor is:", tensor)

# Manually print the tensor name
print("Tensor name:", tensor_name)

"""# Operators"""

import tensorflow as tf

# Create constants
a = tf.constant(121.5)
b = tf.constant([[1, 2], [3, 4], [5, 6]])
c = tf.constant([[7, 8], [9, 10], [11, 12]])

# Perform operations
r1 = tf.sqrt(a)
r2 = tf.add(b, c)
r3 = tf.multiply(b, c)

# Print results directly
print("Square root of a:", r1.numpy())  # Convert tensor to NumPy for printing
print("Addition of b and c:", r2.numpy())
print("Multiplication of b and c:", r3.numpy())

"""Variables"""

import tensorflow as tf

# Create variables
a = tf.Variable(tf.random.uniform([3, 3]), name="v3")
b = tf.Variable([[3, 3], [4, 4]], name="v4")

# Initialize x as a Variable and y as a constant
x = tf.Variable(1)
y = tf.constant(2)

# Define the operation
#r = x.assign(tf.multiply(x, y))

# Print the variables and perform operations
print("Variable a:\n", a.numpy())  # Print the initial value of a
print("Variable b:\n", b.numpy())  # Print the initial value of b

for i in range(10):
  r = x.assign(tf.multiply(x, y))
  print(f"Iteration {i + 1}: r =", r.numpy())  # Perform the operation and print the result

"""Placeholders"""

import tensorflow as tf
import numpy as np

# Define the constants and operations
z = tf.constant(2.0)

# Define the function that takes x as input
def compute_y(x):
    return x * z

# Test with different inputs
print("Value of x:", 100)
print("Computed y:", compute_y(100).numpy())

print("Value of x:", 200)
print("Computed y:", compute_y(200).numpy())

# Generate random input
random_input = np.random.rand(1, 10)
print("Random input:", random_input)
# Note: This will broadcast, so we should reshape if necessary
computed_y_random = compute_y(random_input.reshape(-1))  # Reshape to 1D
print("Computed y with random input:", computed_y_random.numpy())

# Compute the square of x
print("Square of 300:", tf.pow(300, 2).numpy())

"""Tensorboard"""

import tensorflow as tf

# Create variables
x1 = tf.Variable([5], dtype=tf.int32, name="a")
y1 = tf.Variable([6], dtype=tf.int32, name="b")
c = tf.constant([5], dtype=tf.int32, name="c")

# Define the computation
f = tf.multiply(x1, y1) + tf.pow(x1, 2) + y1 + c

# Print the result directly
result_value = f.numpy()
print("Result of the computation:", result_value)

# Optional: If you want to log to TensorBoard
# Create a summary writer
summary_writer = tf.summary.create_file_writer('tensorboard_example')

with summary_writer.as_default():
    # Use tf.squeeze to remove the extra dimension
    tf.summary.scalar("result", tf.squeeze(result_value), step=0)

# Commented out IPython magic to ensure Python compatibility.
# Load TensorBoard
# %load_ext tensorboard
# %tensorboard --logdir tensorboard_example

"""Single input neuron"""

import tensorflow as tf

# Create constants and variable
X = tf.constant(0.5)
Y = tf.constant(0.0)
W = tf.Variable(1.0)

# Learning rate
learning_rate = 0.025

# Create a summary writer for TensorBoard
summary_writer = tf.summary.create_file_writer('single_input_neuron')

# Training loop
for i in range(100):
    with tf.GradientTape() as tape:
        # Forward pass
        predict_Y = tf.multiply(X, W)

        # Compute cost
        cost = tf.pow(Y - predict_Y, 2)

    # Calculate gradients
    gradients = tape.gradient(cost, [W])

    # Update weights
    W.assign_sub(learning_rate * gradients[0])

    # Log summaries
    with summary_writer.as_default():
        tf.summary.scalar('predict_Y', predict_Y, step=i)
        tf.summary.scalar('cost', cost, step=i)
        tf.summary.scalar('W', W, step=i)

# Optional: Print final values
print("Final W:", W.numpy())
print("Final cost:", cost.numpy())